CH-12(POSIX-THREADS)-SUMMARY:

#include <pthread.h>

int pthread_create(pthread_t *thread, pthread_aatr_t *attr, void *(*start_routine)(void *), void *arg);
ex: res = pthread_create(&a_thread, NULL, thread_fun, (void *) msg);


int pthread_join(pthread_t th, void **thread_return);
ex: res = pthread_join(a_thread, &thread_result);

void pthread_exit(void *retval);
ex: pthread_exit("Thank you for the CPU time");

example: thread1.c, thread2.c, thread3.c, thread4.c, thread1_a.c, thread5.c

thread1.c--> It shows a program creating a single extra thread where the variables
are shared with the original thread and gets the new thread to return result to 
the original thread.

thread2.c---> It is same as what thread1.c has done, but here we adding an
additional functionality in the form of signals(i,e catching SIGINT).

thread4.c--> adding more functionality instead of just a text message.Here, we
included two functions sum and product and called those functions from inside 
the thread.

thread1_a.c--> here we move on to a concept on simultaneous execution of threads,
but in a static phenomenon by adding an extra scope variable to test which 
thread is running.
In this, each thread tells the other thread to run by setting the run_now variable
and then waits till the other thread has changed its value before running again.
But this method of switching between threads is very inefficient and hence 
fortunately we have some set of functions specifically designed to provide 
better ways to control the execution of threads and access to critical sections
of code by using "Semaphores" and "Mutexes".


//Semaphores and Mutexes:
examples: thread_sem1.c

When you initialize the semaphore, you set its value to 0.Thus, when the thread's
function starts, the call to sem_wait blocks and waits for the semaphore to 
become nonzero.

In the main thread, you wait until you have some text and then increment the 
semaphore with sem_post, which immediately allows the thread to return from 
its sem_wait and start executing.
Once it has counted the characters, it again calls sem_wait and is blocked until 
the main thread again calls sem_post to increment the semaphore.

examples: thread_semorg.c, thread_sem.c, thread_sem1.c

#include <semaphore.h>

int sem_init(sem_t *sem, int pshared, unsigned int value);
//this initializes semaphore object pointed to by sem
//the arg pshared controls the type of semaphore, if it is 0, 
//the semaphore is local to the current process.

int sem_post(sem_t *sem);
//this atomically increases the value of semaphore by 1.

int sem_wait(sem_t *sem);
//this atomically decreases the value of the semaphore by one, but always
//waits until the semaphore has a nonzero count first.

int sem_destroy(sem_t *sem);
//this takes a pointer to a semaphore and tidies up any resources that
//it may have.But, not that if you attempt to destroy a semaphore for which
//some thread is waiting, then we will get an error.

more examples: thread_semmod.c, thread_sem1a.c, thread_sem1b.c

thread_semmod.c
//In this program, The problem is that the program was relying on text input 
//from the program taking so long that there was time for the other thread to 
//count the words before the main thread was ever ready to give it more words 
//to count.When we tried to give two diff sets of words to count in quick 
//succession(FAST from the keyboard and the wheeeee...automatically), there
//was no time for the second thread to execute.However, the semaphore had 
//been incremented morethan once, so the counter thred just kept counting
// the words and decreasing the semaphore until it became zero again.

//This shows just how careful we need to be with timing considerations 
//in multithreaded programs.


// Thread Synchronization with Mutexes:
Mutexes allow the programmer to lock an object so that only one thread can 
access it.To control access to a critical section of code we lock a mutex
before entering the code section and then unlock it when we have finished.

#include <pthread.h>

The basic functions of mutexes are:

int pthread_mutex_init(pthread_mutext_t *mutex, const pthread_mutexattr_t *mutexattr);

int pthread_mutex_lock(pthread_mutex_t *mutex);

int pthread_mutex_unlock(pthread_mutex_t *mutex);

int pthread_mutex_destroy(pthread_mutex_t *mutex);

Mutexes have a provision to pass attribute which can control its behavior, but 
with the default attribute("fast"), It has a drawback that if a program tries to
call pthread_mutex_lock on a mutex which was already locked, then the program 
will be blocked.Because the thread that holds the lock is the one that is now
blocked, the mutex can never be unlocked and the program will be deadlocked.

A mutex mainly has two states: locked and unlocked.
When a thread wants to access a shared resource, it must first acquire the 
mutex lock b calling pthread_mutex_lock() function.
If the mutex is currently unlocked, the thread will acquire the lock and be 
allowed to access the shared resource.
If the mutex is currently locked by another thread, the calling thread will be
blocked until the mutex becomes available.

After a thread has finished using the shared resource, it must release the mutex 
lock by calling the pthread_mutex_unlock() function.This frees up the lock and 
allows other threads to acquire it and access the shared resource.

Difference b/w Semaphore and Mutex:

The basic difference between Semaphore and Mutex is that Mutex cannot be tracked
whereas Semaphore can be tracked.

It's not possible to track the value of a mutex while switching between threads,
because the value of a mutex (i,e whether it's locked or unlocked)is an internal
state that is not directly accessible from user-level code.

When a thread acquires a mutex lock using pthread_mutex_lock(), the mutex value 
is updated to reflect that it is locked.When the thread releases the lock using
pthread_mutex_unlock(),the mutex value is updated to reflect that it is unlocked.
However, these updates are performed by the operating system kernel which is not 
visible to user-level code.

The mutex value is typically implemented as a binary flag or counter, depending 
on the type of mutex used.However, the exact implementation details are not 
exposed to user-level code, and it's not possible to access or modify the mutex 
value directly.
In general, the use of mutex is intended to be transparent to the threads that 
use it.The threads simply call the lock and unlock functions to acquire and 
release the lock respectively and need not be aware of the internal details of 
how the mutex works.

But as mutex works like polling, it is generally not a good programming practice
and in the real world you would proably have used a semaphore to avoid this.

Now Let's see little more advanced concepts of threads:

Till now, we are resynchronizing the new thread with the main thread by joining 
them using pthread_join() before allowing the program to exit.

Do we really need to the second thread to return infon to the main thread or 
want the main thread to wait for it?

For example, suppose that you create a second thread to backup a copy of data
file that is being edited while the main thread continues to service the user.
When the back up has finished, there is no need for the second thread to rejoin
the main thread, it can just terminate.

How can this be done?

This can be achieved by using "Thread attributes" and such threads can be called 
as detached threads.

When we have a thread attribute object initialized, there are many additional 
functions that we can call to set different attribute behaviors.
ex: detachedstate, schedpolicy

THREAD ATTRIBUTES
#include <pthread.h>

int pthread_attr_setdetachstate(pthread_attr_t *attr, int detachstate);

int pthread_attr_getdetachstate(const pthread_attr_t *attr, int *detachstate);

int pthread_attr_setschedpolicy(pthread_attr_t *attr, int policy);

int pthread_attr_getschedpolicy(const pthread_attr_t *attr, int *policy);

int pthread_attr_setschedparam(pthread_attr_t *attr, const struct sched_param *param);

int pthread_attr_getschedparam(const pthread_attr_t *attr, struct sched_param *param); 

example: detachstate.c

In this code, setting the detach state allowed the secondary thread to complete
independently without the originating thread needing t wait for it.

detachedstate:
This attribute allows you to avoid the need for threads to rejoin.As with most 
of these _set functions, it takes a pointer to the attribute and a flag to 
determine the state required.The two possible flag values for pthread_attr_setdetachstate
are PTHREAD_CREATE_JOINABLE and PTHREAD_CREATE_DETACHED.
By default the attribute will have the value PTHREAD_CREATE_JOINABLE so that
you can allow the two threads to join.If the state is set to PTHREAD_CREATE_DETACHED,
you cannot call pthread_join to recover the exit state of another thread.


example: scheduling.c

In this code, we scheduling attribute where we see that changing the scheduling
attribute is very similar to setting the detached state, but there are two more
functions that we can use to find the available priority levels, 
sched_get_priority_max and sched_get_priority_min.

The working of this code is exactly similar to setting a detached state 
attribute, except that you set the scheduling policy instead.

schedpolicy:
This controls how threads are scheduled.The options are SCHED_OTHER, SCHED_RP
and SCHED_FIFO.By default, the attribute is SCHED_OTHER.The other two types of 
scheduling are available only to processes running with superuser permissions,
because they both have real-time scheduling but with slightly different behavior.
SCHED_RR uses a round-robin scheduling scheme, and SCHED_FIFO uses a "first in,
first out" policy.

schedparam:
This is a partner to schedpolicy and allows control over the scheduling of 
threads running with schedule policy SCHED_OTHER.

example: cancelling_thread.c

In this code, after the new thread has been created in the usual way, the main
thread sleeps(to allow the new thread some time to get started) and then issues
a cancel request.

example: multiple_threads.c, multiple_threads_a.c, multiple_threads_b.c

multiple_threads.c
In this code, if you remove the sleep from the main thread, there is a bug
that the threads are being started using a local variable for the argument to the 
thread function, this variable is updated in the loop.
If the main thread runs fast enough, it might alter the argument(lots_of_threads)
for some of the threads.Behavior like this arises when not enough care is taken 
with shared variables and multiple execution paths.
So, the conclusion is that programming threads required careful attention to design,
to overcome this bug we need to pass the value directly instead of accessing the
value using the pointer.

multiple_threads_a.c
In this code, we made a change by removing sleep call from the main thread.
As a result, we see some strange effect like all threads being started with the 
same argument.
This happens because the threads are being started using a local variable for 
the argument to the thread function, this variable is updated in the loop.
If the main thread runs fast enough, it might alter the argument(lots_of_threads)
for some of the threads.
As discussed, to overcome this problem, we need to pass the value directly 
instead of using pointers.

multiple_threads_b.c:
In this code, we use the value directly from variable(lots_of_threads) instead 
of using pointers, these over come the problem of all threads taking the same 
argument when sleep call from main thread is removed.






