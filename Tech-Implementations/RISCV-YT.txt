1) RISCV-YOUTUBE Implementation: (asciinema recording will be saved into /tmp/tmp_sz4syrp-ascii.cast, to stop asciinema recording type "exit" or CTRL-D)

	A) GENERATING A RISCV MUSL TOOLCHAIN WITH BUILDROOT

	mkdir riscv
	cd riscv/
	wget https://buildroot.org/downloads/buildroot-2023.05.tar.gz
	tar xf buildroot-2023.05.tar.gz
	cd buildroot-2023.05
	make menuconfig
		select the target archictecture as RISC
		select the C library as musl
		and save it
	time make sdk
		if any errors running the following commands
			sudo apt install make
			sudo apt install gcc, g++
			sudo apt-get install libncurses5-dev libncursesw5-dev
			dpkg -L libncurses-dev libncurses5-dev libncursesw5-dev
			sudo apt install vim
			sudo apt install git
	cd output/images
		check for the sdk tar file
	Go to Toolchain folder and extract the sdk tar file inside toolchain folder
	tar xf ../riscv/buildroot-2023.05/output/images/riscv64-buildroot-linux-musl_sdk-buildroot.tar.gz
	cd riscv64-buildroot-linux-musl_sdk-buildroot
	ls -la
	cd bin
	ls -la
	cd ..
	ls -la
	./relocate-sdk.sh
	Go to riscv/
	vi riscv64-env.sh
		enter the following into newly opened file:
		export PATH=$HOME/Downloads/toolchain/riscv64-buildroot-linux-musl_sdk-buildroot/bin:$PATH
	source riscv64-env.sh
	ls -la
	vi hello.c
		write a simple C program to print "Hello world" in the vi editor
	riscv64-linux-gcc hello.c
	riscv64-linux-gcc -static -o hello hello.c
	rm a.out
	sudo apt install qemu-user
	qemu-riscv64 ./hello
		this prints out the text "Hello world" on the screen

	B) HARDWARE EMULATOR

	sudo apt install qemu-system-misc
		after installation is done, run the following command
	qemu-system-riscv64 -M ?
		this will display the supported machines, here we use RISC-V VirtIO board
		because it emulates virtual IO peripherals instead of real hardware
	
	C) BOOT PROCESS and RISC-V PRIVILEGES

		RISC-V has 3 privilege modes:
			User (U-mode): for Applications
			Supervisor (S-mode): for OS Kernel (we use U-Boot)
			Machine (M-mode): for bootloader and firmware (we use OPENSBI)
		RISC-V typical combinations:
			M: for simple embedded systems
			M, U: for embedded systems with memory protection
			M,S,U: for unix stle operating systems with virtual memory

	D) U-BOOT BOOTLOADER

		Download U-Boot from internet sources
	Go to riscv/
	wget https://ftp.denx.de/pub/u-boot/u-boot-2023.07.01.tar.bz2
	tar xf u-boot-2023.07.01.tar.bz2
		next we need to create the cross compiler path
	vi riscv64-env.sh
		append the following the next lines into the opened file
			export CROSS_COMPILE=riscv64-linux-
		and save it
	source riscv64-env.sh
	cd u-boot-2023.07.01
	ls -la configs | grep riscv
		 it will display all the defconfigs ( we will be using u-boot in S-mode to boot the linux kernel)
	make qemu-riscv64_smode_defconfig
		if any error, install the following
			sudo apt-get install bison
			sudo apt-get install flex
			sudo apt-get install libssl-dev
	make qemu-riscv64_smode_defconfig
		now it will get installed
	
	E) COMPILING U-BOOT

	Go to u-boot-2023.07.01
	time make -j8

	F) BUILDING FIRMWARE TO START U-BOOT ( WE USE OPENSBI: OPEN SUPERVISOR BINARY INTERFACE)
		We need to start an OS (S-mode) from the Supervisor/Firmware (M-mode)
	git clone https://github.com/riscv/opensbi.git
	cd opensbi
	git checkout v0.8
	make PLATFORM=generic FW_PAYLOAD_PATH=../u-boot-2023.07.01/u-boot.bin
		Getting errors after running this line
	
	
	

	
	
	
	
	